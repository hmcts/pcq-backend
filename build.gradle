buildscript {
  dependencies {
    classpath "org.flywaydb:flyway-database-postgresql:10.15.2"
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.1.14'
  id 'org.springframework.boot' version '3.3.2'
  id 'org.owasp.dependencycheck' version '9.2.0'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id "info.solidsoft.pitest" version '1.15.0'
  id 'org.sonarqube' version '5.1.0.4882'
  id 'com.gorylenko.gradle-git-properties' version '2.4.2'
  id "io.freefair.lombok" version "8.6"
  id "org.flywaydb.flyway" version "10.15.2"
}

apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "org.owasp.dependencycheck"

group = 'uk.gov.hmcts.reform'
version = '1.0.2'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

gitProperties {
  gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/reform/pcqbackend/gitcommit")
  keys = ['git.commit.id','git.commit.time']
  dateFormat = "yyyy-MM-dd'T'HH:mmZ"
  dateFormatTimeZone = "GMT"
}

sourceSets {

  test {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/test/java')
    }
    resources.srcDir file('src/test/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task unit(type: Test, description: 'Runs the unit tests.', group: 'Verification') {
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  useJUnitPlatform()
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

  systemProperty "scenario", System.getProperty('scenario')

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  //useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.17.0'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

pitest {
  junit5PluginVersion.set('1.2.1')
  targetClasses = ['uk.gov.hmcts.reform.pcqbackend.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.pcqbackend.utils.*'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 50
  timeoutConstInMillis = 30000
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}


project.tasks['pitest'].group = "Verification"

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: pcq-backend"
    property "sonar.projectKey", "uk.gov.hmcts.reform:pcq-backend"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    // CVE-2021-21290
    dependency group: 'com.azure', name: 'azure-core-http-netty', version: '1.15.2'
    dependencySet(group: 'io.netty', version: '4.1.111.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-codec-socks'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-handler-proxy'
      entry 'netty-resolver'
      entry 'netty-transport'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-kqueue'
      entry 'netty-transport-native-unix-common'
      entry 'netty-codec-dns'
      entry 'netty-resolver-dns'
      entry 'netty-resolver-dns-native-macos'
      entry 'netty-resolver-dns-classes-macos'
      entry 'netty-transport-classes-epoll'
      entry 'netty-transport-classes-kqueue'
    }
    // CVE-2018-10237 - Unbounded memory allocation
    // CVE-2020-8908 - Temp directory creation vulnerability
    dependencySet(group: 'com.google.guava', version: '33.2.1-jre') {
      entry 'guava'
    }
    // CVE-2021-29425
    dependency group: 'commons-io', name: 'commons-io', version: '2.16.1'

    dependencySet(group: 'org.springframework.cloud', version: '4.1.3') {
      entry 'spring-cloud-starter-openfeign'
      entry 'spring-cloud-openfeign-core'
    }
  }
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://jitpack.io'
  }
}

def versions = [
  flywaydb            : '10.15.2',
  jjwt                : '0.12.6',
  junit               : '5.10.3',
  junitPlatform       : '1.9.3',
  springBoot          : springBoot.class.package.implementationVersion,
  restAssured         : '5.5.0',
  serenity            : '4.1.20',
  lombok              : '1.18.34',
  gradlePitest        : '1.15.0',
  pitest              : '1.16.1',
  sonarPitest         : '0.5',
  testcontainers      : '1.20.0',
  springCloud         : '4.1.4'
]

dependencies {
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.27.0'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.5'
  implementation group: 'com.github.hmcts', name: 'pcq-commons', version: '1.2.5'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.1.3'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.5.3'
  implementation group: 'com.microsoft.azure', name: 'azure-storage', version: '8.6.6'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'commons-net', name: 'commons-net', version: '3.11.1'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version:  versions.jjwt
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flywaydb
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flywaydb
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: "4.1.3"
  implementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'
  implementation group: "com.networknt", name: "json-schema-validator", version: '1.5.0'

  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: versions.jjwt
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: versions.jjwt

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.3', classifier: 'all'
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '3.0.1'
  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5'
  testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers

  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  integrationTestImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
}

test {
  useJUnitPlatform()
  failFast = true
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

import org.flywaydb.gradle.task.FlywayMigrateTask

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

application {
  mainClass = 'uk.gov.hmcts.reform.pcqbackend.Application'
}

bootJar {
  archiveFileName = 'pcq-backend.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processResources") {
  dependsOn("generateGitProperties")
}
